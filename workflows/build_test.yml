name: VOG-NEST-CICD

# 도커허브의 레지스트리에 이미지를 푸시하고, AWS EC2에 배포하는 워크플로우입니다.
env:
  DOCKER_IMAGE: yrttu0111/yop
  DOCKER_CONTAINER: yop

# 브랜치가 main일 때만 실행합니다.
on:
  push:
    branches:
      - main

# 테스트, 빌드, 배포의 3개의 작업을 순차적으로 실행합니다.
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup node.js 16.19.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.19.0
          cache: "npm"
      - run: npm install
      - run: npm run test

  # 빌드 작업은 테스트 작업이 성공하면 실행됩니다.
  build:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      # Github Actions의 IP를 가져와서 AWS 보안그룹에 추가합니다.
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2
        # AWS 자격증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # 환경변수를 설정 합니다.
      - name: Setting environment variables
        run: |
          echo "AWS_SG_NAME=database-security" >> $GITHUB_ENV
          echo "AWS_SG_NAME_EC2=ec2-public" >> $GITHUB_ENV
        # AWS RDS 보안그룹에 Github Actions IP를 추가합니다.
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        # AWS EC2 보안그룹에 Github Actions IP를 추가합니다.
      - name: Add Github Actions IP to EC2 Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.AWS_SG_NAME_EC2 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Checkout Source Code
        uses: actions/checkout@v3
      # Docker Buildx를 설정합니다.
      - name: Set up docker build
        id: buildx
        uses: docker/setup-buildx-action@v2
      # 도커 이미지를 빌드하고, 도커허브에 푸시합니다.
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
        # 빌드가 완료되면 AWS RDS EC2 보안그룹에서 Github Actions IP를 제거합니다.
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          aws ec2 revoke-security-group-ingress --group-name ${{ env.AWS_SG_NAME_EC2 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  deploy:
    needs: build
    # github actions runner 실행 환경을 self-hosted로 설정합니다.
    runs-on: [self-hosted, label-yop]
    # 도커 이미지를 AWS EC2에 배포합니다.
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 도커 실행 및 환경변수 설정합니다.
      - name: Run docker
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "S3_URL=${{ secrets.S3_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          docker stop ${{ env.DOCKER_CONTAINER }} && docker rm ${{ env.DOCKER_CONTAINER }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 3000:3000 --name ${{ env.DOCKER_CONTAINER }} --restart always ${{ env.DOCKER_IMAGE }}:latest
